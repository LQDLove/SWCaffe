#include <stdio.h>
#include <stdlib.h>
#include <athread.h>
#include <simd.h>
#include "caffe/swlayers/sw_pool_layer_impl.h"

typedef struct _tagSlavePoolingParam
{
	int num,channels,pooled_height,pooled_width,stride_h,stride_w,pad_h,pad_w,kernel_h,kernel_w,height,width;
	int  *mask;
	void *top_data,*bottom_data,*top_mask;
}SlavePoolingParam;

extern SLAVE_FUN(maxPoolForward_f)();
extern SLAVE_FUN(maxPoolForward_d)();
extern SLAVE_FUN(maxPoolBackward_f)();
extern SLAVE_FUN(maxPoolBackward_d)();
extern SLAVE_FUN(avgPoolForward_f)();
extern SLAVE_FUN(avgPoolForward_d)();
extern SLAVE_FUN(avgPoolBackward_f)();
extern SLAVE_FUN(avgPoolBackward_d)();

int pooling_judge_condition(int N,int C,int pooled_height_,int pooled_width_)
{
	const int nMinBuffSize = 16;
	if((N*C) < nMinBuffSize || (pooled_height_*pooled_width_) < nMinBuffSize) return -1;
	return 1;
}

void pooling_forward_max_d(int N,int C,double *pTopData,const double *pBottomData,int*pMask,double*pTopMask,int nBottomOffset,
				int nTopOffset,int use_top_mask,int pooled_height_,int pooled_width_,int stride_h_,
				int stride_w_,int pad_h_,int pad_w_,int kernel_h_,int kernel_w_,int height_,int width_)
{
	SlavePoolingParam param;
   
	param.num = N;
	param.channels = C;
	param.pooled_height = pooled_height_;
	param.pooled_width = pooled_width_;
	param.stride_h = stride_h_;
	param.stride_w = stride_w_;
	param.pad_h = pad_h_;
	param.pad_w = pad_w_;	
	param.kernel_h = kernel_h_;	
	param.kernel_w = kernel_w_;	
	param.height = height_;	
	param.width = width_;	
	param.mask = pMask;	
	param.top_mask = (void*)pTopMask;	
	param.top_data = (void*)pTopData;	
	param.bottom_data = (void*)pBottomData;
	
	athread_spawn(maxPoolForward_d,(void *)&param);
	athread_join();
}
void pooling_forward_max_f(int N,int C,float *pTopData,const float *pBottomData,int*pMask,float*pTopMask,int nBottomOffset,
				int nTopOffset,int use_top_mask,int pooled_height_,int pooled_width_,int stride_h_,
				int stride_w_,int pad_h_,int pad_w_,int kernel_h_,int kernel_w_,int height_,int width_)
{
	SlavePoolingParam param;
   
	param.num = N;
	param.channels = C;
	param.pooled_height = pooled_height_;
	param.pooled_width = pooled_width_;
	param.stride_h = stride_h_;
	param.stride_w = stride_w_;
	param.pad_h = pad_h_;
	param.pad_w = pad_w_;	
	param.kernel_h = kernel_h_;	
	param.kernel_w = kernel_w_;	
	param.height = height_;	
	param.width = width_;	
	param.mask = pMask;	
	param.top_mask = (void*)pTopMask;	
	param.top_data = (void*)pTopData;	
	param.bottom_data = (void*)pBottomData;
	
	athread_spawn(maxPoolForward_f,(void *)&param);
	athread_join();
}
void pooling_forward_avg_d(int N,int C,double *pTopData,const double *pBottomData,int nBottomOffset,
				int nTopOffset,int pooled_height_,int pooled_width_,int stride_h_,
				int stride_w_,int pad_h_,int pad_w_,int kernel_h_,int kernel_w_,int height_,int width_)
{
	SlavePoolingParam param;
   
	param.num = N;
	param.channels = C;
	param.pooled_height = pooled_height_;
	param.pooled_width = pooled_width_;
	param.stride_h = stride_h_;
	param.stride_w = stride_w_;
	param.pad_h = pad_h_;
	param.pad_w = pad_w_;	
	param.kernel_h = kernel_h_;	
	param.kernel_w = kernel_w_;	
	param.height = height_;	
	param.width = width_;	
	param.top_data = (void*)pTopData;	
	param.bottom_data = (void*)pBottomData;
	
	athread_spawn(avgPoolForward_d,(void *)&param);
	athread_join();
}
void pooling_forward_avg_f(int N,int C,float *pTopData,const float *pBottomData,int nBottomOffset,
				int nTopOffset,int pooled_height_,int pooled_width_,int stride_h_,
				int stride_w_,int pad_h_,int pad_w_,int kernel_h_,int kernel_w_,int height_,int width_)
{
	SlavePoolingParam param;
   
	param.num = N;
	param.channels = C;
	param.pooled_height = pooled_height_;
	param.pooled_width = pooled_width_;
	param.stride_h = stride_h_;
	param.stride_w = stride_w_;
	param.pad_h = pad_h_;
	param.pad_w = pad_w_;	
	param.kernel_h = kernel_h_;	
	param.kernel_w = kernel_w_;	
	param.height = height_;	
	param.width = width_;	
	param.top_data = (void*)pTopData;	
	param.bottom_data = (void*)pBottomData;
	
	athread_spawn(avgPoolForward_f,(void *)&param);
	athread_join();
}

void pooling_backward_max_d(int N,int C,const double *pTopData,double *pBottomData,const int*pMask,const double*pTopMask,int nBottomOffset,
				int nTopOffset,int use_top_mask,int pooled_height_,int pooled_width_,int stride_h_,
				int stride_w_,int pad_h_,int pad_w_,int kernel_h_,int kernel_w_,int height_,int width_)
{
	SlavePoolingParam param;
   
	param.num = N;
	param.channels = C;
	param.pooled_height = pooled_height_;
	param.pooled_width = pooled_width_;
	param.stride_h = stride_h_;
	param.stride_w = stride_w_;
	param.pad_h = pad_h_;
	param.pad_w = pad_w_;	
	param.kernel_h = kernel_h_;	
	param.kernel_w = kernel_w_;	
	param.height = height_;	
	param.width = width_;	
	param.mask = (int*)pMask;	
	param.top_mask = (void*)pTopMask;	
	param.top_data = (void*)pTopData;	
	param.bottom_data = (void*)pBottomData;
	
	athread_spawn(maxPoolBackward_d,(void *)&param);
	athread_join();
}
void pooling_backward_max_f(int N,int C,const float *pTopData,float *pBottomData,const int*pMask,const float*pTopMask,int nBottomOffset,
				int nTopOffset,int use_top_mask,int pooled_height_,int pooled_width_,int stride_h_,
				int stride_w_,int pad_h_,int pad_w_,int kernel_h_,int kernel_w_,int height_,int width_)
{
	SlavePoolingParam param;
   
	param.num = N;
	param.channels = C;
	param.pooled_height = pooled_height_;
	param.pooled_width = pooled_width_;
	param.stride_h = stride_h_;
	param.stride_w = stride_w_;
	param.pad_h = pad_h_;
	param.pad_w = pad_w_;	
	param.kernel_h = kernel_h_;	
	param.kernel_w = kernel_w_;	
	param.height = height_;	
	param.width = width_;	
	param.mask = (int*)pMask;	
	param.top_mask = (void*)pTopMask;	
	param.top_data = (void*)pTopData;	
	param.bottom_data = (void*)pBottomData;
	
	athread_spawn(maxPoolBackward_f,(void *)&param);
	athread_join();
}
void pooling_backward_avg_d(int N,int C,const double *pTopData,double *pBottomData,int nBottomOffset,
				int nTopOffset,int pooled_height_,int pooled_width_,int stride_h_,
				int stride_w_,int pad_h_,int pad_w_,int kernel_h_,int kernel_w_,int height_,int width_)
{
	SlavePoolingParam param;
   
	param.num = N;
	param.channels = C;
	param.pooled_height = pooled_height_;
	param.pooled_width = pooled_width_;
	param.stride_h = stride_h_;
	param.stride_w = stride_w_;
	param.pad_h = pad_h_;
	param.pad_w = pad_w_;	
	param.kernel_h = kernel_h_;	
	param.kernel_w = kernel_w_;	
	param.height = height_;	
	param.width = width_;	
	param.top_data = (void*)pTopData;	
	param.bottom_data = (void*)pBottomData;
	
	athread_spawn(avgPoolBackward_d,(void *)&param);
	athread_join();
}
void pooling_backward_avg_f(int N,int C,const float *pTopData,float *pBottomData,int nBottomOffset,
				int nTopOffset,int pooled_height_,int pooled_width_,int stride_h_,
				int stride_w_,int pad_h_,int pad_w_,int kernel_h_,int kernel_w_,int height_,int width_)
{
	SlavePoolingParam param;
   
	param.num = N;
	param.channels = C;
	param.pooled_height = pooled_height_;
	param.pooled_width = pooled_width_;
	param.stride_h = stride_h_;
	param.stride_w = stride_w_;
	param.pad_h = pad_h_;
	param.pad_w = pad_w_;	
	param.kernel_h = kernel_h_;	
	param.kernel_w = kernel_w_;	
	param.height = height_;	
	param.width = width_;	
	param.top_data = (void*)pTopData;	
	param.bottom_data = (void*)pBottomData;
	
	athread_spawn(avgPoolBackward_f,(void *)&param);
	athread_join();
}

